(self.webpackChunkdev_cornelldti_org=self.webpackChunkdev_cornelldti_org||[]).push([[342],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,a(a({ref:t},c),{},{components:n})):r.createElement(h,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9524:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u},default:function(){return c}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={id:"guide-devops",title:"DevOps"},l={unversionedId:"guide-devops",id:"guide-devops",isDocsHomePage:!1,title:"DevOps",description:"CI (Continuous Integration)",source:"@site/docs/guide-devops.md",sourceDirName:".",slug:"/guide-devops",permalink:"/docs/guide-devops",version:"current",frontMatter:{id:"guide-devops",title:"DevOps"},sidebar:"someSidebar",previous:{title:"Code Quality",permalink:"/docs/guide-code-quality"},next:{title:"Code Review",permalink:"/docs/guide-code-review"}},u=[{value:"CI (Continuous Integration)",id:"ci-continuous-integration",children:[]},{value:"CD (Continuous Deployment)",id:"cd-continuous-deployment",children:[]},{value:"Repository Policies and Tools",id:"repository-policies-and-tools",children:[]},{value:"Relevent Documentation",id:"relevent-documentation",children:[]}],s={toc:u};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"ci-continuous-integration"},"CI (Continuous Integration)"),(0,i.kt)("p",null,"Continuous integration (CI) is the practice of building and testing each commit in\nthe repository. It is done automatically by machines and can be integrated with GitHub\nto display the status of each commit."),(0,i.kt)("p",null,"Cornell DTI uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," as our CI service."),(0,i.kt)("p",null,"Each active project must contain a CI configuration that checks the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Code Style"),(0,i.kt)("li",{parentName:"ul"},"Linter Errors"),(0,i.kt)("li",{parentName:"ul"},"Your project can build/compile")),(0,i.kt)("p",null,"All CI checks must pass before your branch can be merged into ",(0,i.kt)("inlineCode",{parentName:"p"},"master"),"."),(0,i.kt)("p",null,"Here is an example CI workflow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"name: CI\non: push\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@master\n      - name: Set up Node\n        uses: actions/setup-node@v1\n      # Use cache to speed up yarn install\n      - name: Use Yarn Cache\n        uses: actions/cache@v1\n        with:\n          path: ~/.cache/yarn\n          key: yarn-${{ hashFiles(format('{0}{1}', github.workspace, '/yarn.lock')) }}\n          restore-keys: yarn-\n      - name: Yarn Install\n        run: yarn install\n      # Check potential code problems\n      - name: Run Linter\n        run: yarn lint\n      - name: Run TypeScript Compiler\n        run: yarn tsc\n      - name: Build Website\n        run: yarn build\n")),(0,i.kt)("h2",{id:"cd-continuous-deployment"},"CD (Continuous Deployment)"),(0,i.kt)("p",null,"Continuous deployment (CD) is a practice that deploys each good commit (after passing)\nCI to staging servers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For heroku projects, we configure heroku to autodeploy master branch to staging."),(0,i.kt)("li",{parentName:"ul"},"For Firebase projects, we use ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/features/actions"},"GitHub Actions")," to auto\ndeploy the app to Firebase Hosting.")),(0,i.kt)("h2",{id:"repository-policies-and-tools"},"Repository Policies and Tools"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Bad code cannot be merged into master",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"All code must be committed to a separate branch before merging."),(0,i.kt)("li",{parentName:"ul"},"All code must pass CI checks before merging."),(0,i.kt)("li",{parentName:"ul"},"All code must pass code review before merging."))),(0,i.kt)("li",{parentName:"ul"},"Giant pull requests are prohibited.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cornell-dti/big-diff-warning"},"big-diff-warning")," will automatically invite\ndeveloper lead to review giant pull requests."),(0,i.kt)("li",{parentName:"ul"},"Unless there is a convincing reason for big pull requests, there will be rejected."))),(0,i.kt)("li",{parentName:"ul"},"Timely feedback of pull requests",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"We use\n",(0,i.kt)("a",{parentName:"li",href:"https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/managing-scheduled-reminders-for-pull-requests"},"GitHub scheduled reminders"),"\nto periodically list open pull requests without review in our slack channels."))),(0,i.kt)("li",{parentName:"ul"},"Website/App Status Checks",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/cornell-dti/dti-repo-tools"},"dti-repo-tools")," performs health check for every\nproject with public website every ten minutes.")))),(0,i.kt)("h2",{id:"relevent-documentation"},"Relevent Documentation"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://help.github.com/en/actions/configuring-and-managing-workflows"},"GitHub Actions Docs"))))}c.isMDXComponent=!0}}]);